#!/usr/bin/env python

''' Unit test for the Frequency Selective Fading module 

File: test_fsf.py
'''

__author__ = "Hauke Holtkamp"
__credits__ = "Hauke Holtkamp"
__license__ = "unknown"
__version__ = "unknown"
__maintainer__ = "Hauke Holtkamp"
__email__ = "h.holtkamp@gmail.com" 
__status__ = "Development" 

import fsf
import unittest
import numpy as np
from utils import utils

class TestSequenceFunctions(unittest.TestCase):

    def setUp(self):
        pass

    def test_fsf_mean(self):
        """ Test unity mean. """
        N = 50
        T = 10
        centerFrequency = 2e9
        totalTime = 0.01
        bandwidth = 1e7
        relativeVelocity = 3

        H, chunkCenters, timeStamp = fsf.fsf(N, T, centerFrequency, totalTime, bandwidth, relativeVelocity)
        ans = np.mean(np.abs(H))
        result = np.ones(T) 
        np.testing.assert_array_almost_equal(ans, result)

    def test_instantChunkFading(self):
        tapGainsNorm = np.array([ 
            0.0449,
            0.0895,
            0.1235,
            0.0981,
            0.0865,
            0.0391,
            0.0895,
            0.0895,
            0.0539,
            0.0356,
            0.0679,
            0.0325,
            0.0325,
            0.0230,
            0.0124,
            0.0277,
            0.0094,
            0.0149,
            0.0016,
            0.0069,
            0.0132,
            0.0037,
            0.0042])
        tapGainsNorm.shape = (23,1) # promote
        t = 0.004
        f = 2.0048e9
        disc_dopp_freq = np.array([
            [-15.5606,  -19.6372,   15.2520,    0.1108,   19.3279],
           [-6.5683,   11.1790,   -8.6475,   -1.8778,  -14.0363],
           [15.2916,    1.3191,    4.4370,  -18.4350,   19.9959],
           [19.1631,  -11.8624,    6.5684,    5.3569,    1.0966],
           [-5.2384,   18.0584,  -16.9274,   19.8232,   17.3193],
           [19.1614,   -6.3499,    2.1299,   -1.6424,  -19.9360],
           [ 1.3774,    2.7174,    4.5710,  -16.2640,   13.4078],
           [18.7846,   -5.7717,  -16.2102,   -4.9658,  -10.7869],
           [19.6819,    1.5025,   10.7101,  -12.6416,   18.1574],
           [17.9368,  -19.3611,    7.6408,  -11.9789,   17.8282],
          [-13.7449,  -14.3416,   12.6645,   19.3312,   19.3916],
          [ 19.9011,  -13.4247,  -19.9076,  -19.9032,   19.9660],
          [-19.9948,   19.9393,  -19.6215,   19.9349,   -6.2241],
          [ 18.9880,    3.3680,   19.9890,    9.4799,   12.9395],
          [ 18.2249,   -4.1318,    0.9548,  -14.0051,    9.8152],
          [ 18.8720,   10.9931,  -19.9261,  -15.5387,   -7.3034],
          [ 17.1861,   -1.4958,  -18.6823,   -5.4596,   11.6007],
          [-19.9944,  -19.4111,   19.7429,  -19.5167,    2.5668],
          [  7.1822,  -13.0292,  -11.7887,   18.5423,   14.1513],
          [-14.6792,  -14.8353,    6.4546,  -18.7910,   18.9747],
          [ 14.1708,   -7.2981,  -19.8194,   18.2591,  -12.7953],
          [-17.5187,  -13.4457,   15.3212,    0.2499,   17.6333],
          [ 18.1196,    3.6307,  -18.6036,   19.5076,    2.5944]])
        disc_dopp_phase = np.array([
                [3.5006,    0.6506,    1.0861,    5.0804,    3.0689],
                [0.5910,    1.7973,    0.0347,    0.4820,    5.3503],
                [4.5771,    3.7784,    1.3634,    1.8850,    0.4282],
                [2.6396,    5.4569,    3.3608,    0.6612,    3.3064],
                [4.2151,    5.1251,    2.1518,    4.4165,    2.0659],
                [5.0685,    2.3557,    1.0414,    2.8444,    2.1495],
                [5.5907,    3.0346,    3.8443,    2.1966,    4.5931],
                [4.1985,    4.8872,    1.7899,    5.0602,    5.2349],
                [5.2085,    1.3760,    1.8995,    0.3599,    4.4470],
                [6.0822,    0.9750,    3.1461,    1.1830,    0.9937],
                [4.7097,    1.5513,    3.3219,    1.7564,    6.1375],
                [3.6515,    6.1396,    0.0890,    4.7316,    3.5173],
                [5.9846,    3.3977,    0.7420,    2.5553,    2.9666],
                [1.3498,    4.1761,    0.8743,    2.0005,    2.4837],
                [1.2943,    4.2291,    4.7883,    2.7557,    0.5300],
                [6.1913,    3.8556,    1.3004,    2.2014,    1.7365],
                [3.2449,    0.4187,    3.1637,    2.8953,    2.3058],
                [1.4966,    2.8960,    1.4687,    2.5900,    5.0088],
                [2.4267,    2.2054,    4.1603,    5.9509,    0.0743],
                [1.3372,    3.8027,    4.0326,    5.9558,    1.4432],
                [1.8749,    3.8463,    5.3386,    2.8930,    4.3170],
                [4.3231,    1.9115,    5.4909,    2.3259,    0.2305],
                [3.9121,    5.2721,    5.9491,    2.1157,    4.9408]])
        delay_taps = 1e-05 * np.array([0,
            0.0060,
            0.0075,
            0.0145,
            0.0150,
            0.0155,
            0.0190,
            0.0220,
            0.0225,
            0.0230,
            0.0335,
            0.0370,
            0.0430,
            0.0510,
            0.0685,
            0.0725,
            0.0735,
            0.0800,
            0.0960,
            0.1020,
            0.1100,
            0.1210,
            0.1845])
        delay_taps.shape = (23,1) # promot
        N_harmonics = 5

        ans = fsf.instantChunkFading(t, f, tapGainsNorm,disc_dopp_phase, disc_dopp_freq, delay_taps, N_harmonics)

        result = 0.0616 - 0.2216j
        np.testing.assert_approx_equal(np.real(ans), np.real(result), significant=3)
        np.testing.assert_approx_equal(np.imag(ans), np.imag(result), significant=3)
        

if __name__ == '__main__':
    unittest.main()
